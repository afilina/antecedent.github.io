<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

<feed xmlns="http://www.w3.org/2005/Atom">
    
  <id>http://antecedent.github.com/patchwork/blog</id>
  <title>Patchwork</title>
  <updated>2011-01-10T15:00:00Z</updated>
  <link rel="self" href="http://antecedent.github.com/patchwork/blog/atom.xml" type="application/atom+xml" />

  <author>
    <name>Ignas Rudaitis</name>
    <uri>http://antecedent.github.com</uri>
    <email>ignas.rudaitis@gmail.com</email>
  </author>
  
  <entry>
    <title>Static Methods, Testability and Monkey Patching</title>
    <id>http://antecedent.github.com/patchwork/blog/static-methods.html</id>
    <published>2011-01-10T15:00:00Z</published>
    <link href="http://antecedent.github.com/patchwork/articles/static-methods.html"/>
    <content type="html"><![CDATA[
        <p>Because of the way PHP works, static method calls are often seen as a <a href="http://googletesting.blogspot.com/2008/12/static-methods-are-death-to-testability.html">major testability obstacle</a> in PHP code. Unlike in Ruby or JavaScript, classes in PHP are completely closed upon definition, so static methods cannot be stubbed (that is, replaced with test stubs) in any natural way. Therefore, any cross-class static method call is essentially a hardcoded dependency in PHP.</p>

<p>In most cases, but by no means in all of them, hardcoded dependencies mean not only poor testability, but also bad component design, which is why <strong>public</strong> static methods should be avoided in object-oriented PHP code in general. Unfortunately, just avoiding them yourself will probably not make them disappear from your code altogether. Lots of third-party libraries have static methods in their public APIs as well, so simply using such libraries will inevitably result in a number of stubborn dependencies in your code.</p>

<p>Rails-inspired Active Record libraries, found in many web application frameworks, make for a perfect example. If you want a list of all users, just call <kbd>User::all()</kbd>. Call it from anywhere: controllers, logging callbacks, authentication layers, just anywhere. APIs like this shine with simplicity, yet they also tend to ruin the testability of any code that uses them.</p>

<p>Fortunately, with the help of proper tools, testability and procedural APIs can still coexist in your code.</p>

<p>The complete article can be found <a href="http://antecedent.github.com/patchwork/articles/static-methods.html">here</a>.</p>
    ]]></content>
  </entry>  

</feed>